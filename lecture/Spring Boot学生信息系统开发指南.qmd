# Spring Boot学生信息系统开发指南

## 目录
- [前言](#前言)
- [一、基础知识准备](#一基础知识准备)
- [二、开发环境准备](#二开发环境准备)
- [三、项目开发流程](#三项目开发流程)
- [四、常见问题](#四常见问题)

## 前言

本指南介绍如何使用Spring Boot技术栈开发一个简单的学生信息管理系统。系统基于以下数据库表:

```sql
CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    age INT,
    gender VARCHAR(10),
    major VARCHAR(50),
    email VARCHAR(100)
);
```

## 一、基础知识准备

### 1. Spring Boot基础

**AI提示词：**
```
请解释Spring Boot的核心概念:
1. Spring Boot是什么？它有什么优势？
2. 自动配置原理是什么？
3. 起步依赖(Starter)是如何工作的？
请用简单的示例说明。
```

### 2. 项目架构

**AI提示词：**
```
请说明在Spring Boot项目中:
1. 分层架构的组成:
   - Entity/Model层
   - Repository层
   - Service层
   - Controller层
2. 各层的职责和关系
3. 如何实现解耦和依赖注入
```

## 二、开发环境准备

### 1. VS Code配置

**AI提示词：**
```
请帮我配置VS Code开发Spring Boot项目:
1. 安装必要的插件:
   - Extension Pack for Java
   - Spring Boot Extension Pack
   
2. 配置Java环境:
   - 确保已安装JDK 8或以上
   - 验证java -version命令
```

### 2. Maven配置

**AI提示词：**
```
请帮我在VS Code中配置Maven:
1. 确认Maven已安装:
   mvn -version
2. 配置阿里云镜像(可选):
   - 修改settings.xml
   - 添加阿里云镜像源
```

## 三、项目开发流程

### 1. 创建Spring Boot项目

**AI提示词：**
```
请帮我:
1. 使用Spring Initializr创建项目:
   - groupId: com.example
   - artifactId: student-management
   - Java版本: 8
   - 打包方式: Jar
   
2. 添加必要的依赖:
   - spring-boot-starter-web
   - spring-boot-starter-data-jpa
   - spring-boot-starter-thymeleaf
   - mysql-connector-java
   
3. 解释项目结构
```

### 2. 配置application.properties

**AI提示词：**
```
请帮我配置application.properties:
1. 数据库连接配置:
   - URL
   - 用户名密码
   - 连接池设置
2. JPA配置:
   - 自动创建表
   - 显示SQL
3. 服务器配置:
   - 端口
   - 上下文路径
4. Thymeleaf配置
```

### 3. 实体类开发

**AI提示词：**
```
请帮我:
1. 创建Student实体类:
   - 添加JPA注解
   - 使用Lombok注解
   - 添加字段验证
2. 创建数据传输对象(DTO)
```

### 4. Repository层开发

**AI提示词：**
```
请帮我创建:
1. StudentRepository接口:
   - 继承JpaRepository
   - 添加自定义查询方法
2. 实现分页查询
3. 添加自定义查询
```

### 5. Service层开发

**AI提示词：**
```
请帮我创建:
1. StudentService接口:
   - 定义业务方法
   - 处理数据验证
   
2. StudentServiceImpl实现类:
   - 实现CRUD操作
   - 添加业务逻辑
   - 处理异常情况
```

### 6. Controller层开发

**AI提示词：**
```
请帮我创建StudentController:
1. 基本CRUD接口:
   - @GetMapping("/list")
   - @PostMapping("/add")
   - @PutMapping("/edit/{id}")
   - @DeleteMapping("/delete/{id}")

2. 实现功能:
   - 分页查询
   - 数据验证
   - 错误处理
   - 返回统一响应格式
```

### 7. 前端页面开发

**AI提示词：**
```
请帮我创建Thymeleaf模板:
1. list.html - 学生列表:
   - 分页表格
   - CRUD操作按钮
   
2. form.html - 添加/编辑表单:
   - 表单验证
   - 错误提示
   
3. 公共片段:
   - header.html
   - footer.html
```

### 8. 测试运行

**AI提示词：**
```
请说明如何:
1. 运行Spring Boot应用:
   mvn spring-boot:run
2. 访问系统功能
3. 测试API接口
4. 处理常见错误
```

## 四、常见问题

### 1. 异常处理

**AI提示词：**
```
请说明如何处理:
1. 统一异常处理:
   - @ControllerAdvice的使用
   - 自定义异常类
2. 数据验证异常
3. 业务逻辑异常
```

### 2. 调试方法

**AI提示词：**
```
开发过程中如何调试:
1. 使用日志:
   - 配置日志级别
   - 使用lombok @Slf4j
2. 使用开发者工具
3. 使用断点调试
4. 常见问题排查
```

## 结语

本指南面向Spring Boot初学者，通过开发学生信息系统来学习Spring Boot的核心功能。建议：

1. 理解Spring Boot的核心特性
2. 按照开发流程逐步实现
3. 多查阅Spring Boot文档
4. 注意代码规范和最佳实践

祝你开发顺利！ 