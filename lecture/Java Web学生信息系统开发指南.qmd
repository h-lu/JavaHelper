# Java Web学生信息系统开发指南

## 目录
- [前言](#前言)
- [一、基础知识准备](#一基础知识准备)
- [二、开发环境准备](#二开发环境准备)
- [三、项目开发流程](#三项目开发流程)
- [四、常见问题](#四常见问题)

## 前言

本指南介绍如何使用基础Java Web技术(Servlet + JSP + JDBC)开发一个简单的学生信息管理系统。系统基于以下数据库表:

```sql
CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    age INT,
    gender VARCHAR(10),
    major VARCHAR(50),
    email VARCHAR(100)
);
```

## 一、基础知识准备

### 1. Java Web基础

**AI提示词：**
```
请解释Java Web开发中的核心概念:
1. Servlet是什么?它的基本工作原理是什么?
2. JSP页面是如何工作的?
3. JDBC如何连接数据库?
请用简单的示例说明。
```

### 2. 三层架构

**AI提示词：**
```
请说明在Java Web项目中:
1. Model层的作用是什么?
2. DAO层主要做什么?
3. Servlet层负责处理什么?
请用具体例子解释这三层是如何协同工作的。
```

## 二、开发环境准备

### 1. VS Code配置

**AI提示词：**
```
请帮我配置VS Code开发Java Web项目:
1. 安装必要的插件:
   - Extension Pack for Java
   - Maven for Java
   
2. 配置Java环境:
   - 确保已安装JDK 8或以上
   - 验证java -version命令
```

### 2. Maven配置

**AI提示词：**
```
请帮我在VS Code中配置Maven:
1. 确认Maven已安装:
   mvn -version
2. 配置阿里云镜像(可选):
   - 修改settings.xml
   - 添加阿里云镜像源
```

## 三、项目开发流程

### 1. 创建Maven项目

**AI提示词：**
```
请帮我:
1. 使用Maven创建Web项目:
   - groupId: com.example
   - artifactId: student-management
   - packaging: war
2. 解释项目目录结构的用途
```

### 2. 配置pom.xml

**AI提示词：**
```
请帮我编写pom.xml,需要包含:
1. 基本依赖:
   - javax.servlet-api (3.1.0或更高版本)
   - jsp-api
   - mysql-connector-java
   - jstl
2. 设置编译版本为Java 8
3. 配置maven-war-plugin
4. 配置tomcat7-maven-plugin:
   - 设置端口
   - 配置上下文路径
   - 开启自动重载

请解释每个配置的作用。
```

### 3. 验证环境

**AI提示词：**
```
请帮我:
1. 创建HelloServlet:
   - 使用@WebServlet注解配置URL映射
   - 实现简单的doGet方法
2. 创建index.jsp作为首页
3. 使用Maven运行项目:
   mvn tomcat7:run
4. 验证项目:
   - 访问 http://localhost:8080/项目名
   - 检查控制台输出
   - 确认页面正常显示
```

### 4. Model层开发

**AI提示词：**
```
请帮我:
1. 在com.example.model包下创建Student类
2. 添加所需的属性和方法
3. 使用lombok简化代码(可选)
4. 添加基本的数据验证
```

### 5. DAO层开发

**AI提示词：**
```
请帮我创建:
1. 数据库连接工具类DBUtil
2. StudentDAO接口定义CRUD方法
3. StudentDAOImpl实现类
```

### 6. Servlet层开发

**AI提示词：**
```
请帮我创建以下Servlet:
1. StudentListServlet:
   - 使用@WebServlet("/student/list")注解
   - doGet方法显示学生列表
   - 分页显示功能(可选)

2. StudentAddServlet:
   - 使用@WebServlet("/student/add")注解
   - doGet显示添加表单
   - doPost处理表单提交

3. StudentEditServlet:
   - 使用@WebServlet("/student/edit")注解
   - doGet显示编辑表单
   - doPost处理更新请求

4. StudentDeleteServlet:
   - 使用@WebServlet("/student/delete")注解
   - doPost处理删除请求

5. 创建字符编码过滤器:
   - 使用@WebFilter注解
   - 设置UTF-8编码
```

### 7. JSP页面开发

**AI提示词：**
```
请帮我创建JSP页面:
1. list.jsp - 学生列表页面:
   - 显示数据表格
   - 添加/编辑/删除按钮
   
2. form.jsp - 添加/编辑表单:
   - 输入验证
   - 错误提示
   
3. common/header.jsp - 公共头部
4. common/footer.jsp - 公共底部
```

### 8. 测试运行

**AI提示词：**
```
请说明如何:
1. 使用maven命令启动目
2. 访问学生列表页面
3. 测试添加学生功能
4. 测试修改和删除功能
5. 处理常见错误
```

## 四、常见问题

### 1. 编码问题

**AI提示词：**
```
如何解决中文乱码:
1. 在Servlet中设置编码
2. 在JSP页面设置编码
3. 数据库连接的编码设置
```

### 2. 调试方法

**AI提示词：**
```
开发过程中如何调试:
1. 使用System.out.println
2. 检查异常堆栈
3. 查看服务器日志
4. 常见错误的解决方法
```

## 结语

本指南面向Java Web初学者,通过开发简单的学生管理系统来学习Servlet、JSP和JDBC的基础知识。建议:

1. 先理解每个技术点的基本原理
2. 动手实践每个步骤
3. 遇到问题多查阅文档
4. 先实现基本功能,再考虑优化

祝你学习愉快!

